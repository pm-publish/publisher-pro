@use "sass:math";

.c-footer__comingSoon {
  display: none !important;
}
.b-commingSoon {
  .c-header, .c-footer__top, .c-footer {
    display: none !important;
  }
  .c-footer__comingSoon {
    display: block !important;
  }
}

.g-commingSoon {
  $selfComingSoon: &;
  background-color: var(--main-color);
  min-height: 100vh;

  &__main {
    display: flex;
    flex-direction: column;
    margin: 150px 20px 50px;

    &-ls {
      border-bottom: 1px solid $grey3;
      padding-bottom: 40px;
      margin-bottom: 40px;
    }

    h2 {
      font-size: 42px;
      line-height: 1.19;
      color: $white;
      font-family: $secondaryFont;
    }

    p {
      color: $grey4;
      font-size: 22px;
      line-height: 1.45;
    }

    &__input {
      box-shadow: inset 2px 2px 4px 2px $grey3;
      background: $grey3;
      height: 48px;
      width: 100%;
      outline: none;
      border: none;
      padding: 12px 20px;
      margin-top: 36px;
      
      &:placeholder {
        color: $grey4;
      }
    }

    &__btn {
      background: $blue_sh5;
      height: 48px;
      width: 100%;
      color: $white;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-top: 20px;
      font-size: 16px;
      font-weight: $weightBold;
    }
  }

  @include responsive(xs) {
    @include respond-to(md) {
      #{$selfComingSoon} {
        &__main {
          flex-direction: row;
          justify-content: center;

          h2 {
            font-size: 50px;
          }

          &__btn {
            width: auto;
            min-width: 182px;
          }

          &-ls {
            border-bottom: none;
            border-right: 1px solid $grey3;
            max-width: 380px;
            padding-right: 100px;
            margin-right: 180px;
            margin-bottom: 0;
          }

          &-rs {
            max-width: 400px;
            margin: 70px 0 120px;
          }
        }
      }
    }
  }
}



















$cus_coming-soon-columns:                12 !default;
$cus_coming-soon-gutter-width:           30px !default;
$cus_coming-soon-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
) !default;


$cus_coming-soon-gutter-width: 30px !default;
$cus_coming-soon-container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1300px
) !default;


.cus_coming-soon-row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -15px;
    margin-left: -15px;
}





@function cus_coming-soon-breakpoint-min($name, $breakpoints: $cus_coming-soon-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
  }

  @mixin cus_coming-soon-media-breakpoint-up($name, $breakpoints: $cus_coming-soon-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
      @media (min-width: $min) {
        @content;
      }
    } @else {
      @content;
    }
  }


@mixin cus_coming-soon-make-container() {
    width: 100%;
    padding-right: ($cus_coming-soon-gutter-width * 0.5);
    padding-left: ($cus_coming-soon-gutter-width * 0.5);
    margin-right: auto;
    margin-left: auto;
    box-sizing: border-box;

  }
  
  
  // For each breakpoint, define the maximum width of the container in a media query
  @mixin cus_coming-soon-make-container-max-widths($max-widths: $cus_coming-soon-container-max-widths, $breakpoints: $cus_coming-soon-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        max-width: $container-max-width;
      }
    }
  }
  


  .cus_coming-soon-container {
    @include cus_coming-soon-make-container();
    @include cus_coming-soon-make-container-max-widths();
  }

  .cus_coming-soon-container-fluid {
    @include cus_coming-soon-make-container();
  }















@function cus_coming-soon-breakpoint-next($name, $breakpoints: $cus_coming-soon-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  @function cus_coming-soon-breakpoint-min($name, $breakpoints: $cus_coming-soon-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
  }
  
  @function cus_coming-soon-breakpoint-max($name, $breakpoints: $cus_coming-soon-breakpoints) {
    $next: cus_coming-soon-breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);
  }
  
  @function cus_coming-soon-breakpoint-infix($name, $breakpoints: $cus_coming-soon-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
  }
  

  @mixin cus_coming-soon-media-breakpoint-up($name, $breakpoints: $cus_coming-soon-breakpoints) {
    $min: cus_coming-soon-breakpoint-min($name, $breakpoints);
    @if $min {
      @media (min-width: $min) {
        @content;
      }
    } @else {
      @content;
    }
  }

  @mixin cus_coming-soon-media-breakpoint-down($name, $breakpoints: $cus_coming-soon-breakpoints) {
    $max: cus_coming-soon-breakpoint-max($name, $breakpoints);
    @if $max {
      @media (max-width: $max) {
        @content;
      }
    } @else {
      @content;
    }
  }
  
  @mixin cus_coming-soon-media-breakpoint-between($lower, $upper, $breakpoints: $cus_coming-soon-breakpoints) {
    $min: cus_coming-soon-breakpoint-min($lower, $breakpoints);
    $max: cus_coming-soon-breakpoint-max($upper, $breakpoints);
  
    @if $min != null and $max != null {
      @media (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else if $max == null {
      @include cus_coming-soon-media-breakpoint-up($lower, $breakpoints) {
        @content;
      }
    } @else if $min == null {
      @include cus_coming-soon-media-breakpoint-down($upper, $breakpoints) {
        @content;
      }
    }
  }
  
  @mixin cus_coming-soon-media-breakpoint-only($name, $breakpoints: $cus_coming-soon-breakpoints) {
    $min: cus_coming-soon-breakpoint-min($name, $breakpoints);
    $max: cus_coming-soon-breakpoint-max($name, $breakpoints);
  
    @if $min != null and $max != null {
      @media (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else if $max == null {
      @include cus_coming-soon-media-breakpoint-up($name, $breakpoints) {
        @content;
      }
    } @else if $min == null {
      @include cus_coming-soon-media-breakpoint-down($name, $breakpoints) {
        @content;
      }
    }
  }

  
  @mixin cus_coming-soon-make-col-ready() {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    min-height: 1px; // Prevent collapsing
    padding-right: ($grid-gutter-width * 0.5);
    padding-left: ($grid-gutter-width * 0.5);

  }
  
  @mixin cus_coming-soon-make-col($size, $columns: $cus_coming-soon-columns) {
    flex: 0 0 percentage(math.div($size, $columns));
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage(math.div($size, $columns));

  }
  
  @mixin cus_coming-soon-make-col-offset($size, $columns: $cus_coming-soon-columns) {
    $num: math.div($size, $columns);
    margin-left: if($num == 0, 0, percentage($num));
  }
  

@mixin cus_coming-soon-make-grid-columns($columns: $cus_coming-soon-columns, $gutter: $cus_coming-soon-gutter-width, $breakpoints: $cus_coming-soon-breakpoints) {
    // Common properties for all breakpoints
    %grid-column {
        position: relative;
        width: 100%;
        min-height: 1px; // Prevent columns from collapsing when empty
        padding-right: ($gutter * 0.5);
        padding-left: ($gutter * 0.5);
        box-sizing: border-box;

    }

    @each $breakpoint in map-keys($breakpoints) {
        $infix: cus_coming-soon-breakpoint-infix($breakpoint, $breakpoints);

        // Allow columns to stretch full width below their breakpoints
        @for $i from 1 through $columns {
            .cus_coming-soon-col#{$infix}-#{$i} {
                @extend %grid-column;
            }
        }
        .cus_coming-soon-col#{$infix},
        .cus_coming-soon-col#{$infix}-auto {
            @extend %grid-column;
        }

        @include cus_coming-soon-media-breakpoint-up($breakpoint, $breakpoints) {
        // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            .cus_coming-soon-col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }
            .cus_coming-soon-col#{$infix}-auto {
                flex: 0 0 auto;
                width: auto;
                max-width: none; // Reset earlier grid tiers
            }

            @for $i from 1 through $columns {
                .cus_coming-soon-col#{$infix}-#{$i} {
                @include cus_coming-soon-make-col($i, $columns);
                }
            }

            .cus_coming-soon-order#{$infix}-first { order: -1; }

            .cus_coming-soon-order#{$infix}-last { order: $columns + 1; }

            @for $i from 0 through $columns {
                .cus_coming-soon-order#{$infix}-#{$i} { order: $i; }
            }

            // `$columns - 1` because offsetting by the width of an entire row isn't possible
            @for $i from 0 through ($columns - 1) {
                @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
                    .cus_coming-soon-offset#{$infix}-#{$i} {
                        @include cus_coming-soon-make-col-offset($i, $columns);
                    }
                }
            }
        }
    }
}


@include cus_coming-soon-make-grid-columns();